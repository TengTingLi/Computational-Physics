
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;

/*
 * /*Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template*/
 



/**
 *
 * @author User
 */
public class fix_axis extends javax.swing.JFrame {

    /**
     * Creates new form fix_axis
     */
    public fix_axis() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plot_panel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        plot_panel.setBackground(new java.awt.Color(204, 204, 0));
        plot_panel.setPreferredSize(new java.awt.Dimension(700, 700));

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout plot_panelLayout = new javax.swing.GroupLayout(plot_panel);
        plot_panel.setLayout(plot_panelLayout);
        plot_panelLayout.setHorizontalGroup(
            plot_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plot_panelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButton1)
                .addContainerGap(603, Short.MAX_VALUE))
        );
        plot_panelLayout.setVerticalGroup(
            plot_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, plot_panelLayout.createSequentialGroup()
                .addContainerGap(516, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plot_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plot_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
        
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        draw(plot_panel);
        double x0 = 1;
        double y0 = 1;
        init_plot(x0,y0,2,2,5,95);
        set_pen_size(2);
        plot_point(1.5,1.5,x0,y0);
        draw_line(1.25,1.25,1.75,1.5,x0,y0);
        draw_rect(1.1,1.2,0.1,0.1,x0,y0);
    }//GEN-LAST:event_jButton1ActionPerformed

    //provided by Assosiate Prof Dr ABD Rahman Tamuri
    //modify by Teng Ting Li
    //version 1.4.0
     // <editor-fold defaultstate="collapsed" desc=" ${Changelog} ">
    /*
    1.1.0 - defult draw format is size 1 and black to draw axis more nicely
          - rename PlotPanel to panel_plot
    1.1.1 - change clear background code to use .update method
    1.1.2 - rename initPlot to init_plot
          - rename plotPoint to plot_point
          - rename setPenSize to set_pen_size
          - rename setPenColor to set_pen_color
          - rename drawString to draw_string
    1.2.0 - disabled paint method
          - (deprecated)need to specific init_plot() to draw on what panel
            - special thanks to bryan chong
          - modified spacing of code for readability
    1.2.1 - re-enable paint method, seem like it is needed to use plot.update(gg)
    1.2.2 - added draw_axis function
    1.2.3 - seperated gg draw declaration to its own method draw(Jpanel)
            to reduce lag resulting from using panel.refresh(gg)
    1.3.0 - rename xoffset to x_offset_percent and change type from int to double
          - same with yoffset
          - increase tickmark drawn from 9 to 10
          - added draw_line with take coordinate of user instead of screen coordinate
    1.4.0 - origin of axis can finally be changed
          - plot_point can be plotted based on said origin
          - same with draw_line
          - plot vector now only work if origin is at (0,0)
    */
    // </editor-fold>
     // <editor-fold defaultstate="collapsed" desc=" ${UrusanJavaPlot} ">


    Graphics2D gg;
    javax.swing.JPanel p_panel;  //placeholder panel variable, acts like pointer for panel to draw
    
    //no idea what any of this do, seems like java legacy stuff
    @Override 
    public void paint(Graphics g){
    gg = (Graphics2D) g;
    super.paint(gg);
    }
    
    public void draw(javax.swing.JPanel plot){
        //set what panel to draw on
        p_panel = plot;
        gg = (Graphics2D)plot.getGraphics();
    }
    
    double convfx, convfy;  //conversion ratio from user coordinate to panel coordinate
    int offsetj,offseti;    //offset in panel coordinate
    double W,H;                //declare as variable for easy recall
    
    public void init_plot(double x1,double y1,double x2, double y2,
                          double x_offset_percent,double y_offset_percent){
        //set axis drawing format
        set_pen_size(1);
        set_pen_color(Color.black);

        //panel width and height but smaller to fit tickmark
        W = (p_panel.getWidth() * 0.9); 
        H = (p_panel.getHeight() * 0.9);
        
        //magic for here
        //coefficient that convert user coordinate to screen coordinate
        convfx=W/(x2-x1);  
        convfy=H/(y2-y1);
        
        //determinte the offset point based on panel original width and height
        double dpx = x_offset_percent/100.0;
        double dpy = y_offset_percent/100.0;
        offseti=(int)(p_panel.getWidth()*dpx);
        offsetj=(int)(p_panel.getHeight()*dpy);
        
        //draw axis line
        gg.drawLine(0, offsetj ,getWidth(),offsetj );
        gg.drawLine(offseti, 0,offseti,getHeight());
        
        //draw scale x with tickmark
        for(double i = 0; i < 11; i++){
            int l = (int)(i/10.0*W);
            gg.drawLine(offseti+l, offsetj,offseti+l,offsetj+5);
            gg.drawLine(offseti-l, offsetj,offseti-l,offsetj+5);
            gg.drawString(""+String.format("%.2f",x1+(x2-x1)*(l/W)), offseti+l-5, offsetj+20);
            gg.drawString(""+String.format("%.2f",x1+(x2-x1)*(-l/W)), offseti-l-5, offsetj+20);
        }
        //draw scale y with tickmark
        for(double i = 0; i < 11; i++){
            int p = (int)(i/10.0*H);
            gg.drawLine(offseti, offsetj-p,offseti-5,offsetj-p);
            gg.drawLine(offseti, offsetj+p,offseti-5,offsetj+p);
            gg.drawString(""+String.format("%.2f",y1+(y2-y1)*(p/H)), offseti-26, offsetj-p+4); 
            gg.drawString(""+String.format("%.2f",y1+(y2-y1)*(-p/H)), offseti-31, offsetj+p+4);
        }
    }

    public void plot_point(double x, double y,double x0,double y0){
        //x0 & y0 will be the origin
        double sx,sy;
        int i,j;
        //calculate screen coordinates
        sx = (x - x0) * convfx;
        sy = (y - y0) * convfy;
        //converst to integer plus axis offset
        i=offseti+(int)sx;
        j=offsetj-(int)sy;
        gg.drawLine(i,j,i,j);
    }
    
    public void draw_line(double x1,double y1,double x2,double y2,double x0,double y0){
        //see plot_point for math explanation
        gg.drawLine(offseti+(int)((x1 - x0) * convfx), 
                    offsetj-(int)((y1 - y0) * convfy), 
                    offseti+(int)((x2 - x0) * convfx), 
                    offsetj-(int)((y2 - y0) * convfy));
    }
    
    public void draw_rect(double x1,double y1,double x2,double y2,double x0, double y0){
        gg.fillRect(//x1 & y1 is upper left coordinate of the box
                    offseti+(int)((x1-x0)*convfx), 
                    offsetj-(int)((y1-y0)*convfy), 
                    //x2 & y2 is size of square
                    (int)((x2)*convfx), 
                    (int)((y2)*convfy));
        //draw a second time to actually fill the square
        gg.fillRect(offseti+(int)((x1-x0)*convfx), 
                    offsetj-(int)((y1-y0)*convfy), 
                    (int)((x2)*convfx), 
                    (int)((y2)*convfy));
        
    }
  
    
    public void plotVector(double datax, double datay){
        double sx,sy;
        int i,j;
        //calculate screen coordinates
        sx=datax*convfx;
        sy=datay*convfy;
        //converst to integer plus axis offset
        i=offseti+(int)sx;
        j=offsetj-(int)sy;
        gg.drawLine(offseti,offsetj,i,j);
        }
    
    public void plotVector1(double x0, double y0, double x, double y){
        double sx0,sy0,sx,sy;
        int i0,j0,i,j;
        //calculate screen coordinates
        sx0=x0*convfx;
        sy0=y0*convfy;
        sx=x*convfx;
        sy=y*convfy;
        //converst to integer plus axis offset
        i0=offseti+(int)sx0;
        j0=offsetj-(int)sy0;
        i=offseti+(int)sx;
        j=offsetj-(int)sy;
        gg.drawLine(i0,j0,i,j);
    }
    
    private void set_pen_size (int penSize) {
        gg.setStroke(new BasicStroke(penSize));
        gg.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    }
    
    public void set_pen_color(Color penColor){
        gg.setColor(penColor);  
    }
    
    public void draw_string(String ss, int x, int y){
         gg.drawString(ss, offseti+x, offsetj-y); //offseti is in pixel of the 
    }
 
    public void draw_axis(String x_label,String y_label){
        //draw x_label above the end of positive x axis
        int y_pixel_length = (int)(y_label.length() * 6.5);
        gg.drawString(x_label, (int)W - y_pixel_length, offsetj - 8);
        //draw y_label beside the top of positive y axis
        gg.drawString(y_label, offseti+2,8);
    }
 
 
    //Urusan File
    public PrintStream openfile (String filename){
        PrintStream ps = null;
        try{
            ps = new PrintStream (new FileOutputStream(filename));
        }catch (IOException e){
        System.err.printf("\nProblem creating file:%s\n\n",filename);}
        return ps;
    }

    public void callGnuplot(javax.swing.JTextArea GnuplotCommand){
        PrintStream ps = openfile("gnuplotcmd.plt");
        String strCmd = GnuplotCommand.getText();
        ps.printf("%s\n", strCmd);
        ps.close();

        Runtime callgp = Runtime.getRuntime();
        try {
           // Process prcs = callgp.exec("C:\\gnuplot\\bin\\wgnuplot -persist gnuplotcmd.plt");
            Process prcs = callgp.exec("C:\\Users\\User\\Desktop\\my ting 2 university boogaloo\\sem 6\\SSCP3333 COMPUTATIONAL PHYSICS\\wgnuplot gnuplotcmd.plt");
        } catch (IOException e) {
           System.err.println ("Error calling gnuplot");
        }
    }

// </editor-fold>
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fix_axis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fix_axis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fix_axis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fix_axis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fix_axis().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel plot_panel;
    // End of variables declaration//GEN-END:variables
}
